<?php
/**
 * WebBasedTrainingsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * WebBasedTrainingsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebBasedTrainingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createWebBasedTrainingBuchungUsingPOST
     *
     * Ermöglicht es, einen Teilnehmer auf ein Web Based Training zu buchen
     *
     * @param  string $wbt_id ID des Web Based Trainings (required)
     * @param  \Swagger\Client\Model\TeilnehmerAktionBuchenApiDto $teilnehmerbuchung_create_api_dto Informationen zu einer Teilnehmerbuchung, die angelegt werden soll. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeilnehmerbuchungApiDto
     */
    public function createWebBasedTrainingBuchungUsingPOST($wbt_id, $teilnehmerbuchung_create_api_dto = null)
    {
        list($response) = $this->createWebBasedTrainingBuchungUsingPOSTWithHttpInfo($wbt_id, $teilnehmerbuchung_create_api_dto);
        return $response;
    }

    /**
     * Operation createWebBasedTrainingBuchungUsingPOSTWithHttpInfo
     *
     * Ermöglicht es, einen Teilnehmer auf ein Web Based Training zu buchen
     *
     * @param  string $wbt_id ID des Web Based Trainings (required)
     * @param  \Swagger\Client\Model\TeilnehmerAktionBuchenApiDto $teilnehmerbuchung_create_api_dto Informationen zu einer Teilnehmerbuchung, die angelegt werden soll. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeilnehmerbuchungApiDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWebBasedTrainingBuchungUsingPOSTWithHttpInfo($wbt_id, $teilnehmerbuchung_create_api_dto = null)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerbuchungApiDto';
        $request = $this->createWebBasedTrainingBuchungUsingPOSTRequest($wbt_id, $teilnehmerbuchung_create_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeilnehmerbuchungApiDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWebBasedTrainingBuchungUsingPOSTAsync
     *
     * Ermöglicht es, einen Teilnehmer auf ein Web Based Training zu buchen
     *
     * @param  string $wbt_id ID des Web Based Trainings (required)
     * @param  \Swagger\Client\Model\TeilnehmerAktionBuchenApiDto $teilnehmerbuchung_create_api_dto Informationen zu einer Teilnehmerbuchung, die angelegt werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebBasedTrainingBuchungUsingPOSTAsync($wbt_id, $teilnehmerbuchung_create_api_dto = null)
    {
        return $this->createWebBasedTrainingBuchungUsingPOSTAsyncWithHttpInfo($wbt_id, $teilnehmerbuchung_create_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWebBasedTrainingBuchungUsingPOSTAsyncWithHttpInfo
     *
     * Ermöglicht es, einen Teilnehmer auf ein Web Based Training zu buchen
     *
     * @param  string $wbt_id ID des Web Based Trainings (required)
     * @param  \Swagger\Client\Model\TeilnehmerAktionBuchenApiDto $teilnehmerbuchung_create_api_dto Informationen zu einer Teilnehmerbuchung, die angelegt werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebBasedTrainingBuchungUsingPOSTAsyncWithHttpInfo($wbt_id, $teilnehmerbuchung_create_api_dto = null)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerbuchungApiDto';
        $request = $this->createWebBasedTrainingBuchungUsingPOSTRequest($wbt_id, $teilnehmerbuchung_create_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWebBasedTrainingBuchungUsingPOST'
     *
     * @param  string $wbt_id ID des Web Based Trainings (required)
     * @param  \Swagger\Client\Model\TeilnehmerAktionBuchenApiDto $teilnehmerbuchung_create_api_dto Informationen zu einer Teilnehmerbuchung, die angelegt werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWebBasedTrainingBuchungUsingPOSTRequest($wbt_id, $teilnehmerbuchung_create_api_dto = null)
    {
        // verify the required parameter 'wbt_id' is set
        if ($wbt_id === null || (is_array($wbt_id) && count($wbt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wbt_id when calling createWebBasedTrainingBuchungUsingPOST'
            );
        }

        $resourcePath = '/v2/webbasedtrainings/{wbtId}/buchen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($wbt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wbtId' . '}',
                ObjectSerializer::toPathValue($wbt_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($teilnehmerbuchung_create_api_dto)) {
            $_tempBody = $teilnehmerbuchung_create_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWebBasedTrainingUsingPOST
     *
     * Legt ein Web Based Training an
     *
     * @param  \Swagger\Client\Model\CreateWebBasedTraining $create_web_based_training_api_dto Definition eines Web Bases Training, das angelegt werden soll. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebBasedTraining
     */
    public function createWebBasedTrainingUsingPOST($create_web_based_training_api_dto = null)
    {
        list($response) = $this->createWebBasedTrainingUsingPOSTWithHttpInfo($create_web_based_training_api_dto);
        return $response;
    }

    /**
     * Operation createWebBasedTrainingUsingPOSTWithHttpInfo
     *
     * Legt ein Web Based Training an
     *
     * @param  \Swagger\Client\Model\CreateWebBasedTraining $create_web_based_training_api_dto Definition eines Web Bases Training, das angelegt werden soll. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebBasedTraining, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWebBasedTrainingUsingPOSTWithHttpInfo($create_web_based_training_api_dto = null)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining';
        $request = $this->createWebBasedTrainingUsingPOSTRequest($create_web_based_training_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebBasedTraining',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWebBasedTrainingUsingPOSTAsync
     *
     * Legt ein Web Based Training an
     *
     * @param  \Swagger\Client\Model\CreateWebBasedTraining $create_web_based_training_api_dto Definition eines Web Bases Training, das angelegt werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebBasedTrainingUsingPOSTAsync($create_web_based_training_api_dto = null)
    {
        return $this->createWebBasedTrainingUsingPOSTAsyncWithHttpInfo($create_web_based_training_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWebBasedTrainingUsingPOSTAsyncWithHttpInfo
     *
     * Legt ein Web Based Training an
     *
     * @param  \Swagger\Client\Model\CreateWebBasedTraining $create_web_based_training_api_dto Definition eines Web Bases Training, das angelegt werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebBasedTrainingUsingPOSTAsyncWithHttpInfo($create_web_based_training_api_dto = null)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining';
        $request = $this->createWebBasedTrainingUsingPOSTRequest($create_web_based_training_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWebBasedTrainingUsingPOST'
     *
     * @param  \Swagger\Client\Model\CreateWebBasedTraining $create_web_based_training_api_dto Definition eines Web Bases Training, das angelegt werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWebBasedTrainingUsingPOSTRequest($create_web_based_training_api_dto = null)
    {

        $resourcePath = '/v2/webbasedtrainings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($create_web_based_training_api_dto)) {
            $_tempBody = $create_web_based_training_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeilnehmerbuchungenZuWebBasedTrainingUsingGET
     *
     * Ermöglicht es, Teilnehmerbuchungen die den Status \"Angemeldet\", \"Eingeladen\" oder \"Bestätigt\" gesetzt haben für ein Web Based Training abzurufen.
     *
     * @param  string $id ID des Web Based Trainings, zu dem die Teilnehmerbuchungen geladen werden sollen (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeilnehmerbuchungAbrufenApiDto[]
     */
    public function getTeilnehmerbuchungenZuWebBasedTrainingUsingGET($id)
    {
        list($response) = $this->getTeilnehmerbuchungenZuWebBasedTrainingUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTeilnehmerbuchungenZuWebBasedTrainingUsingGETWithHttpInfo
     *
     * Ermöglicht es, Teilnehmerbuchungen die den Status \"Angemeldet\", \"Eingeladen\" oder \"Bestätigt\" gesetzt haben für ein Web Based Training abzurufen.
     *
     * @param  string $id ID des Web Based Trainings, zu dem die Teilnehmerbuchungen geladen werden sollen (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeilnehmerbuchungAbrufenApiDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeilnehmerbuchungenZuWebBasedTrainingUsingGETWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerbuchungAbrufenApiDto[]';
        $request = $this->getTeilnehmerbuchungenZuWebBasedTrainingUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeilnehmerbuchungAbrufenApiDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeilnehmerbuchungenZuWebBasedTrainingUsingGETAsync
     *
     * Ermöglicht es, Teilnehmerbuchungen die den Status \"Angemeldet\", \"Eingeladen\" oder \"Bestätigt\" gesetzt haben für ein Web Based Training abzurufen.
     *
     * @param  string $id ID des Web Based Trainings, zu dem die Teilnehmerbuchungen geladen werden sollen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeilnehmerbuchungenZuWebBasedTrainingUsingGETAsync($id)
    {
        return $this->getTeilnehmerbuchungenZuWebBasedTrainingUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeilnehmerbuchungenZuWebBasedTrainingUsingGETAsyncWithHttpInfo
     *
     * Ermöglicht es, Teilnehmerbuchungen die den Status \"Angemeldet\", \"Eingeladen\" oder \"Bestätigt\" gesetzt haben für ein Web Based Training abzurufen.
     *
     * @param  string $id ID des Web Based Trainings, zu dem die Teilnehmerbuchungen geladen werden sollen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeilnehmerbuchungenZuWebBasedTrainingUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerbuchungAbrufenApiDto[]';
        $request = $this->getTeilnehmerbuchungenZuWebBasedTrainingUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeilnehmerbuchungenZuWebBasedTrainingUsingGET'
     *
     * @param  string $id ID des Web Based Trainings, zu dem die Teilnehmerbuchungen geladen werden sollen (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeilnehmerbuchungenZuWebBasedTrainingUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTeilnehmerbuchungenZuWebBasedTrainingUsingGET'
            );
        }

        $resourcePath = '/v2/webbasedtrainings/{id}/teilnehmerbuchungen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebBasedTrainingUsingGET
     *
     * Ruft ein Web Based Training ab
     *
     * @param  string $id ID des Web Based Trainings (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebBasedTraining
     */
    public function getWebBasedTrainingUsingGET($id)
    {
        list($response) = $this->getWebBasedTrainingUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWebBasedTrainingUsingGETWithHttpInfo
     *
     * Ruft ein Web Based Training ab
     *
     * @param  string $id ID des Web Based Trainings (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebBasedTraining, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebBasedTrainingUsingGETWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining';
        $request = $this->getWebBasedTrainingUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebBasedTraining',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebBasedTrainingUsingGETAsync
     *
     * Ruft ein Web Based Training ab
     *
     * @param  string $id ID des Web Based Trainings (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebBasedTrainingUsingGETAsync($id)
    {
        return $this->getWebBasedTrainingUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebBasedTrainingUsingGETAsyncWithHttpInfo
     *
     * Ruft ein Web Based Training ab
     *
     * @param  string $id ID des Web Based Trainings (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebBasedTrainingUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining';
        $request = $this->getWebBasedTrainingUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebBasedTrainingUsingGET'
     *
     * @param  string $id ID des Web Based Trainings (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebBasedTrainingUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWebBasedTrainingUsingGET'
            );
        }

        $resourcePath = '/v2/webbasedtrainings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebBasedTrainingsUsingGET
     *
     * Ruft Web Based Trainings ab.
     *
     * @param  \DateTime $modifiziert_ab Änderungs- bzw. Einfügezeitpunkt, ab dem die Web Based Trainings geliefert werden sollen. Das Format muss wie folgt sein: yyyy-MM-ddTHH:mm:ss.sss (optional)
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebBasedTraining[]
     */
    public function getWebBasedTrainingsUsingGET($modifiziert_ab = null, $teilnehmergruppekuerzel = null)
    {
        list($response) = $this->getWebBasedTrainingsUsingGETWithHttpInfo($modifiziert_ab, $teilnehmergruppekuerzel);
        return $response;
    }

    /**
     * Operation getWebBasedTrainingsUsingGETWithHttpInfo
     *
     * Ruft Web Based Trainings ab.
     *
     * @param  \DateTime $modifiziert_ab Änderungs- bzw. Einfügezeitpunkt, ab dem die Web Based Trainings geliefert werden sollen. Das Format muss wie folgt sein: yyyy-MM-ddTHH:mm:ss.sss (optional)
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebBasedTraining[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebBasedTrainingsUsingGETWithHttpInfo($modifiziert_ab = null, $teilnehmergruppekuerzel = null)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining[]';
        $request = $this->getWebBasedTrainingsUsingGETRequest($modifiziert_ab, $teilnehmergruppekuerzel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebBasedTraining[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebBasedTrainingsUsingGETAsync
     *
     * Ruft Web Based Trainings ab.
     *
     * @param  \DateTime $modifiziert_ab Änderungs- bzw. Einfügezeitpunkt, ab dem die Web Based Trainings geliefert werden sollen. Das Format muss wie folgt sein: yyyy-MM-ddTHH:mm:ss.sss (optional)
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebBasedTrainingsUsingGETAsync($modifiziert_ab = null, $teilnehmergruppekuerzel = null)
    {
        return $this->getWebBasedTrainingsUsingGETAsyncWithHttpInfo($modifiziert_ab, $teilnehmergruppekuerzel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebBasedTrainingsUsingGETAsyncWithHttpInfo
     *
     * Ruft Web Based Trainings ab.
     *
     * @param  \DateTime $modifiziert_ab Änderungs- bzw. Einfügezeitpunkt, ab dem die Web Based Trainings geliefert werden sollen. Das Format muss wie folgt sein: yyyy-MM-ddTHH:mm:ss.sss (optional)
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebBasedTrainingsUsingGETAsyncWithHttpInfo($modifiziert_ab = null, $teilnehmergruppekuerzel = null)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining[]';
        $request = $this->getWebBasedTrainingsUsingGETRequest($modifiziert_ab, $teilnehmergruppekuerzel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebBasedTrainingsUsingGET'
     *
     * @param  \DateTime $modifiziert_ab Änderungs- bzw. Einfügezeitpunkt, ab dem die Web Based Trainings geliefert werden sollen. Das Format muss wie folgt sein: yyyy-MM-ddTHH:mm:ss.sss (optional)
     * @param  string $teilnehmergruppekuerzel Optionaler Parameter, um zu steuern, für welche Teilnehmergruppe die Veranstaltungen abgerufen werden sollen. Ist eine Teilnehmergruppe angegeben, so werden alle publiziertenVeranstaltungen für diese Teilnehmergruppe zurückgegeben. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebBasedTrainingsUsingGETRequest($modifiziert_ab = null, $teilnehmergruppekuerzel = null)
    {

        $resourcePath = '/v2/webbasedtrainings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($modifiziert_ab !== null) {
            $queryParams['modifiziertAb'] = ObjectSerializer::toQueryValue($modifiziert_ab);
        }
        // query params
        if ($teilnehmergruppekuerzel !== null) {
            $queryParams['teilnehmergruppekuerzel'] = ObjectSerializer::toQueryValue($teilnehmergruppekuerzel);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWebBasedTrainingUsingPUT
     *
     * Modifiziert ein bestehendes Web Based Training
     *
     * @param  \Swagger\Client\Model\WebBasedTraining $update_web_based_training_api_dto Definition eines Web Bases Training, das aktualisiert werden soll. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebBasedTraining
     */
    public function updateWebBasedTrainingUsingPUT($update_web_based_training_api_dto = null)
    {
        list($response) = $this->updateWebBasedTrainingUsingPUTWithHttpInfo($update_web_based_training_api_dto);
        return $response;
    }

    /**
     * Operation updateWebBasedTrainingUsingPUTWithHttpInfo
     *
     * Modifiziert ein bestehendes Web Based Training
     *
     * @param  \Swagger\Client\Model\WebBasedTraining $update_web_based_training_api_dto Definition eines Web Bases Training, das aktualisiert werden soll. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebBasedTraining, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWebBasedTrainingUsingPUTWithHttpInfo($update_web_based_training_api_dto = null)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining';
        $request = $this->updateWebBasedTrainingUsingPUTRequest($update_web_based_training_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebBasedTraining',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWebBasedTrainingUsingPUTAsync
     *
     * Modifiziert ein bestehendes Web Based Training
     *
     * @param  \Swagger\Client\Model\WebBasedTraining $update_web_based_training_api_dto Definition eines Web Bases Training, das aktualisiert werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebBasedTrainingUsingPUTAsync($update_web_based_training_api_dto = null)
    {
        return $this->updateWebBasedTrainingUsingPUTAsyncWithHttpInfo($update_web_based_training_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWebBasedTrainingUsingPUTAsyncWithHttpInfo
     *
     * Modifiziert ein bestehendes Web Based Training
     *
     * @param  \Swagger\Client\Model\WebBasedTraining $update_web_based_training_api_dto Definition eines Web Bases Training, das aktualisiert werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebBasedTrainingUsingPUTAsyncWithHttpInfo($update_web_based_training_api_dto = null)
    {
        $returnType = '\Swagger\Client\Model\WebBasedTraining';
        $request = $this->updateWebBasedTrainingUsingPUTRequest($update_web_based_training_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWebBasedTrainingUsingPUT'
     *
     * @param  \Swagger\Client\Model\WebBasedTraining $update_web_based_training_api_dto Definition eines Web Bases Training, das aktualisiert werden soll. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWebBasedTrainingUsingPUTRequest($update_web_based_training_api_dto = null)
    {

        $resourcePath = '/v2/webbasedtrainings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($update_web_based_training_api_dto)) {
            $_tempBody = $update_web_based_training_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
