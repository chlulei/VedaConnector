<?php
/**
 * AusbildungszugabschnitteApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AusbildungszugabschnitteApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AusbildungszugabschnitteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation meldeLernerfolgUsingPUT
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function meldeLernerfolgUsingPUT($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        $this->meldeLernerfolgUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto);
    }

    /**
     * Operation meldeLernerfolgUsingPUTWithHttpInfo
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function meldeLernerfolgUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        $returnType = '';
        $request = $this->meldeLernerfolgUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation meldeLernerfolgUsingPUTAsync
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldeLernerfolgUsingPUTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        return $this->meldeLernerfolgUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation meldeLernerfolgUsingPUTAsyncWithHttpInfo
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldeLernerfolgUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        $returnType = '';
        $request = $this->meldeLernerfolgUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'meldeLernerfolgUsingPUT'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\MeldeLernerfolgApiDto $lernerfolg_melden_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function meldeLernerfolgUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling meldeLernerfolgUsingPUT'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling meldeLernerfolgUsingPUT'
            );
        }

        $resourcePath = '/v2/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/meldelernerfolg';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($lernerfolg_melden_api_dto)) {
            $_tempBody = $lernerfolg_melden_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUT
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function meldePraktikumsberichtEingegangenUsingPUT($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        $this->meldePraktikumsberichtEingegangenUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto);
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUTWithHttpInfo
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function meldePraktikumsberichtEingegangenUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        $returnType = '';
        $request = $this->meldePraktikumsberichtEingegangenUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUTAsync
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtEingegangenUsingPUTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        return $this->meldePraktikumsberichtEingegangenUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation meldePraktikumsberichtEingegangenUsingPUTAsyncWithHttpInfo
     *
     * Ermöglicht es, den Eingang eines Praktikumsberichts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtEingegangenUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        $returnType = '';
        $request = $this->meldePraktikumsberichtEingegangenUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'meldePraktikumsberichtEingegangenUsingPUT'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtEingegangenApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function meldePraktikumsberichtEingegangenUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling meldePraktikumsberichtEingegangenUsingPUT'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling meldePraktikumsberichtEingegangenUsingPUT'
            );
        }

        $resourcePath = '/v2/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/meldepraktikumsberichteingegangen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($praktikumsbericht_eingegangen_api_dto)) {
            $_tempBody = $praktikumsbericht_eingegangen_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUT
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function meldePraktikumsberichtKorrigiertUsingPUT($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        $this->meldePraktikumsberichtKorrigiertUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto);
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUTWithHttpInfo
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        $returnType = '';
        $request = $this->meldePraktikumsberichtKorrigiertUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUTAsync
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        return $this->meldePraktikumsberichtKorrigiertUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation meldePraktikumsberichtKorrigiertUsingPUTAsyncWithHttpInfo
     *
     * Ermöglicht es, den korrigierten Praktikumsbericht für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function meldePraktikumsberichtKorrigiertUsingPUTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        $returnType = '';
        $request = $this->meldePraktikumsberichtKorrigiertUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'meldePraktikumsberichtKorrigiertUsingPUT'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\PraktikumsberichtKorrigiertApiDto $praktikumsbericht_eingegangen_api_dto Details zum Lernerfolg. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function meldePraktikumsberichtKorrigiertUsingPUTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $praktikumsbericht_eingegangen_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling meldePraktikumsberichtKorrigiertUsingPUT'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling meldePraktikumsberichtKorrigiertUsingPUT'
            );
        }

        $resourcePath = '/v2/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/meldepraktikumsberichtkorrigiert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($praktikumsbericht_eingegangen_api_dto)) {
            $_tempBody = $praktikumsbericht_eingegangen_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
