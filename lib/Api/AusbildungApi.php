<?php
/**
 * AusbildungApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * REST-Schnittstellen des VEDA Bildungsmanagers.
 *
 * OpenAPI spec version: 1
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AusbildungApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AusbildungApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAusbildungenVonAusbildungsgangUsingGET
     *
     * Ruft alle laufenden Ausbildungen eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Ausbildung[]
     */
    public function getAusbildungenVonAusbildungsgangUsingGET($id)
    {
        list($response) = $this->getAusbildungenVonAusbildungsgangUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAusbildungenVonAusbildungsgangUsingGETWithHttpInfo
     *
     * Ruft alle laufenden Ausbildungen eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Ausbildung[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAusbildungenVonAusbildungsgangUsingGETWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Ausbildung[]';
        $request = $this->getAusbildungenVonAusbildungsgangUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Ausbildung[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAusbildungenVonAusbildungsgangUsingGETAsync
     *
     * Ruft alle laufenden Ausbildungen eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAusbildungenVonAusbildungsgangUsingGETAsync($id)
    {
        return $this->getAusbildungenVonAusbildungsgangUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAusbildungenVonAusbildungsgangUsingGETAsyncWithHttpInfo
     *
     * Ruft alle laufenden Ausbildungen eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAusbildungenVonAusbildungsgangUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Ausbildung[]';
        $request = $this->getAusbildungenVonAusbildungsgangUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAusbildungenVonAusbildungsgangUsingGET'
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAusbildungenVonAusbildungsgangUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAusbildungenVonAusbildungsgangUsingGET'
            );
        }

        $resourcePath = '/v1/ausbildungszuege/{id}/ausbildungen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAusbildungszuegeVonAusbildungsgangUsingGET
     *
     * Ruft alle Ausbildungszüge eines Ausbildungsgangs ab
     *
     * @param  string $id ID des Ausbildungsgangs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Ausbildungszug[]
     */
    public function getAusbildungszuegeVonAusbildungsgangUsingGET($id)
    {
        list($response) = $this->getAusbildungszuegeVonAusbildungsgangUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAusbildungszuegeVonAusbildungsgangUsingGETWithHttpInfo
     *
     * Ruft alle Ausbildungszüge eines Ausbildungsgangs ab
     *
     * @param  string $id ID des Ausbildungsgangs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Ausbildungszug[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAusbildungszuegeVonAusbildungsgangUsingGETWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Ausbildungszug[]';
        $request = $this->getAusbildungszuegeVonAusbildungsgangUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Ausbildungszug[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAusbildungszuegeVonAusbildungsgangUsingGETAsync
     *
     * Ruft alle Ausbildungszüge eines Ausbildungsgangs ab
     *
     * @param  string $id ID des Ausbildungsgangs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAusbildungszuegeVonAusbildungsgangUsingGETAsync($id)
    {
        return $this->getAusbildungszuegeVonAusbildungsgangUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAusbildungszuegeVonAusbildungsgangUsingGETAsyncWithHttpInfo
     *
     * Ruft alle Ausbildungszüge eines Ausbildungsgangs ab
     *
     * @param  string $id ID des Ausbildungsgangs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAusbildungszuegeVonAusbildungsgangUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Ausbildungszug[]';
        $request = $this->getAusbildungszuegeVonAusbildungsgangUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAusbildungszuegeVonAusbildungsgangUsingGET'
     *
     * @param  string $id ID des Ausbildungsgangs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAusbildungszuegeVonAusbildungsgangUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAusbildungszuegeVonAusbildungsgangUsingGET'
            );
        }

        $resourcePath = '/v1/ausbildungsgaenge/{id}/ausbildungszuege';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeilnehmerELearningPlattformUsingGET
     *
     * Ruft alle Teilnehmer einer eLearning-Plattform ab
     *
     * @param  string $id ID der eLearning-Plattform (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeilnehmerELearningplattform[]
     */
    public function getTeilnehmerELearningPlattformUsingGET($id)
    {
        list($response) = $this->getTeilnehmerELearningPlattformUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTeilnehmerELearningPlattformUsingGETWithHttpInfo
     *
     * Ruft alle Teilnehmer einer eLearning-Plattform ab
     *
     * @param  string $id ID der eLearning-Plattform (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeilnehmerELearningplattform[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeilnehmerELearningPlattformUsingGETWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerELearningplattform[]';
        $request = $this->getTeilnehmerELearningPlattformUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeilnehmerELearningplattform[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeilnehmerELearningPlattformUsingGETAsync
     *
     * Ruft alle Teilnehmer einer eLearning-Plattform ab
     *
     * @param  string $id ID der eLearning-Plattform (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeilnehmerELearningPlattformUsingGETAsync($id)
    {
        return $this->getTeilnehmerELearningPlattformUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeilnehmerELearningPlattformUsingGETAsyncWithHttpInfo
     *
     * Ruft alle Teilnehmer einer eLearning-Plattform ab
     *
     * @param  string $id ID der eLearning-Plattform (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeilnehmerELearningPlattformUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerELearningplattform[]';
        $request = $this->getTeilnehmerELearningPlattformUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeilnehmerELearningPlattformUsingGET'
     *
     * @param  string $id ID der eLearning-Plattform (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeilnehmerELearningPlattformUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTeilnehmerELearningPlattformUsingGET'
            );
        }

        $resourcePath = '/v1/elearningplattform/{id}/teilnehmer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeilnehmerVonAusbildungszugUsingGET
     *
     * Ruft alle Teilnehmer eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\TeilnehmerAusbildungszug[]
     */
    public function getTeilnehmerVonAusbildungszugUsingGET($id)
    {
        list($response) = $this->getTeilnehmerVonAusbildungszugUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getTeilnehmerVonAusbildungszugUsingGETWithHttpInfo
     *
     * Ruft alle Teilnehmer eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\TeilnehmerAusbildungszug[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeilnehmerVonAusbildungszugUsingGETWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerAusbildungszug[]';
        $request = $this->getTeilnehmerVonAusbildungszugUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\TeilnehmerAusbildungszug[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeilnehmerVonAusbildungszugUsingGETAsync
     *
     * Ruft alle Teilnehmer eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeilnehmerVonAusbildungszugUsingGETAsync($id)
    {
        return $this->getTeilnehmerVonAusbildungszugUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeilnehmerVonAusbildungszugUsingGETAsyncWithHttpInfo
     *
     * Ruft alle Teilnehmer eines Ausbildungszugs ab
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeilnehmerVonAusbildungszugUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\TeilnehmerAusbildungszug[]';
        $request = $this->getTeilnehmerVonAusbildungszugUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeilnehmerVonAusbildungszugUsingGET'
     *
     * @param  string $id ID des Ausbildungszugs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeilnehmerVonAusbildungszugUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTeilnehmerVonAusbildungszugUsingGET'
            );
        }

        $resourcePath = '/v1/ausbildungszuege/{id}/teilnehmer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lekBearbeitetUsingPOST
     *
     * Ermöglicht es, die LEK als bearbeitet zu kennzeichnen
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekBearbeitetApiDto $lek_bearbeitet_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function lekBearbeitetUsingPOST($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto = null)
    {
        $this->lekBearbeitetUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto);
    }

    /**
     * Operation lekBearbeitetUsingPOSTWithHttpInfo
     *
     * Ermöglicht es, die LEK als bearbeitet zu kennzeichnen
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekBearbeitetApiDto $lek_bearbeitet_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function lekBearbeitetUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto = null)
    {
        $returnType = '';
        $request = $this->lekBearbeitetUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation lekBearbeitetUsingPOSTAsync
     *
     * Ermöglicht es, die LEK als bearbeitet zu kennzeichnen
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekBearbeitetApiDto $lek_bearbeitet_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lekBearbeitetUsingPOSTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto = null)
    {
        return $this->lekBearbeitetUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lekBearbeitetUsingPOSTAsyncWithHttpInfo
     *
     * Ermöglicht es, die LEK als bearbeitet zu kennzeichnen
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekBearbeitetApiDto $lek_bearbeitet_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lekBearbeitetUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto = null)
    {
        $returnType = '';
        $request = $this->lekBearbeitetUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lekBearbeitetUsingPOST'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekBearbeitetApiDto $lek_bearbeitet_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function lekBearbeitetUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_bearbeitet_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling lekBearbeitetUsingPOST'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling lekBearbeitetUsingPOST'
            );
        }

        $resourcePath = '/v1/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/lekBearbeitet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($lek_bearbeitet_api_dto)) {
            $_tempBody = $lek_bearbeitet_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lekFreischaltenUsingPOST
     *
     * Ermöglicht es, die LEK freizuschalten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekFreischaltenApiDto $lek_freischalten_api_dto Informationen zum Freischalten der LEK. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function lekFreischaltenUsingPOST($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto = null)
    {
        $this->lekFreischaltenUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto);
    }

    /**
     * Operation lekFreischaltenUsingPOSTWithHttpInfo
     *
     * Ermöglicht es, die LEK freizuschalten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekFreischaltenApiDto $lek_freischalten_api_dto Informationen zum Freischalten der LEK. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function lekFreischaltenUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto = null)
    {
        $returnType = '';
        $request = $this->lekFreischaltenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation lekFreischaltenUsingPOSTAsync
     *
     * Ermöglicht es, die LEK freizuschalten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekFreischaltenApiDto $lek_freischalten_api_dto Informationen zum Freischalten der LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lekFreischaltenUsingPOSTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto = null)
    {
        return $this->lekFreischaltenUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lekFreischaltenUsingPOSTAsyncWithHttpInfo
     *
     * Ermöglicht es, die LEK freizuschalten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekFreischaltenApiDto $lek_freischalten_api_dto Informationen zum Freischalten der LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lekFreischaltenUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto = null)
    {
        $returnType = '';
        $request = $this->lekFreischaltenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lekFreischaltenUsingPOST'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LekFreischaltenApiDto $lek_freischalten_api_dto Informationen zum Freischalten der LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function lekFreischaltenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lek_freischalten_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling lekFreischaltenUsingPOST'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling lekFreischaltenUsingPOST'
            );
        }

        $resourcePath = '/v1/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/lekFreischalten';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($lek_freischalten_api_dto)) {
            $_tempBody = $lek_freischalten_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lernerfolgMeldenUsingPOST
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernerfolgMeldenApiDto $lernerfolg_melden_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function lernerfolgMeldenUsingPOST($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        $this->lernerfolgMeldenUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto);
    }

    /**
     * Operation lernerfolgMeldenUsingPOSTWithHttpInfo
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernerfolgMeldenApiDto $lernerfolg_melden_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function lernerfolgMeldenUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        $returnType = '';
        $request = $this->lernerfolgMeldenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation lernerfolgMeldenUsingPOSTAsync
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernerfolgMeldenApiDto $lernerfolg_melden_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lernerfolgMeldenUsingPOSTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        return $this->lernerfolgMeldenUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lernerfolgMeldenUsingPOSTAsyncWithHttpInfo
     *
     * Ermöglicht es, den Lernerfolg eines Ausbildungszugabschnitts für den angegebenen Teilnehmer zu melden
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernerfolgMeldenApiDto $lernerfolg_melden_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lernerfolgMeldenUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        $returnType = '';
        $request = $this->lernerfolgMeldenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lernerfolgMeldenUsingPOST'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernerfolgMeldenApiDto $lernerfolg_melden_api_dto Informationen zum Bearbeiten einer LEK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function lernerfolgMeldenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernerfolg_melden_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling lernerfolgMeldenUsingPOST'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling lernerfolgMeldenUsingPOST'
            );
        }

        $resourcePath = '/v1/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/lernerfolgMelden';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($lernerfolg_melden_api_dto)) {
            $_tempBody = $lernerfolg_melden_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lernfristStartenUsingPOST
     *
     * Ermöglicht es, die Lernfrist zu starten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernfristStartenApiDto $lernfrist_starten_api_dto Informationen zum Starten der Lernfrist. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function lernfristStartenUsingPOST($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto = null)
    {
        $this->lernfristStartenUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto);
    }

    /**
     * Operation lernfristStartenUsingPOSTWithHttpInfo
     *
     * Ermöglicht es, die Lernfrist zu starten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernfristStartenApiDto $lernfrist_starten_api_dto Informationen zum Starten der Lernfrist. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function lernfristStartenUsingPOSTWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto = null)
    {
        $returnType = '';
        $request = $this->lernfristStartenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation lernfristStartenUsingPOSTAsync
     *
     * Ermöglicht es, die Lernfrist zu starten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernfristStartenApiDto $lernfrist_starten_api_dto Informationen zum Starten der Lernfrist. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lernfristStartenUsingPOSTAsync($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto = null)
    {
        return $this->lernfristStartenUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lernfristStartenUsingPOSTAsyncWithHttpInfo
     *
     * Ermöglicht es, die Lernfrist zu starten
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernfristStartenApiDto $lernfrist_starten_api_dto Informationen zum Starten der Lernfrist. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lernfristStartenUsingPOSTAsyncWithHttpInfo($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto = null)
    {
        $returnType = '';
        $request = $this->lernfristStartenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lernfristStartenUsingPOST'
     *
     * @param  string $ausbildungszugabschnitt_id ID des Ausbildungszugabschnitts (required)
     * @param  string $teilnehmer_id ID des Teilnehmers (required)
     * @param  \Swagger\Client\Model\LernfristStartenApiDto $lernfrist_starten_api_dto Informationen zum Starten der Lernfrist. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function lernfristStartenUsingPOSTRequest($ausbildungszugabschnitt_id, $teilnehmer_id, $lernfrist_starten_api_dto = null)
    {
        // verify the required parameter 'ausbildungszugabschnitt_id' is set
        if ($ausbildungszugabschnitt_id === null || (is_array($ausbildungszugabschnitt_id) && count($ausbildungszugabschnitt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ausbildungszugabschnitt_id when calling lernfristStartenUsingPOST'
            );
        }
        // verify the required parameter 'teilnehmer_id' is set
        if ($teilnehmer_id === null || (is_array($teilnehmer_id) && count($teilnehmer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teilnehmer_id when calling lernfristStartenUsingPOST'
            );
        }

        $resourcePath = '/v1/ausbildungszugabschnitte/{ausbildungszugabschnittId}/teilnehmer/{teilnehmerId}/lernfristStarten';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($ausbildungszugabschnitt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ausbildungszugabschnittId' . '}',
                ObjectSerializer::toPathValue($ausbildungszugabschnitt_id),
                $resourcePath
            );
        }
        // path params
        if ($teilnehmer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teilnehmerId' . '}',
                ObjectSerializer::toPathValue($teilnehmer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($lernfrist_starten_api_dto)) {
            $_tempBody = $lernfrist_starten_api_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
