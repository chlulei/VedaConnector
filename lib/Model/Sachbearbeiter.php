<?php
/**
 * Sachbearbeiter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sachbearbeiter Class Doc Comment
 *
 * @category Class
 * @description Die Informationen zu einem Sachbearbeiter.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sachbearbeiter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Sachbearbeiter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'freitext_titel' => 'string',
        'geschaeftliche_e_mail_adresse' => 'string',
        'geschaeftliche_telefonnummer' => 'string',
        'nachname' => 'string',
        'oid' => 'string',
        'titel' => 'string',
        'vorname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'freitext_titel' => null,
        'geschaeftliche_e_mail_adresse' => null,
        'geschaeftliche_telefonnummer' => null,
        'nachname' => null,
        'oid' => null,
        'titel' => null,
        'vorname' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'freitext_titel' => 'freitextTitel',
        'geschaeftliche_e_mail_adresse' => 'geschaeftlicheEMailAdresse',
        'geschaeftliche_telefonnummer' => 'geschaeftlicheTelefonnummer',
        'nachname' => 'nachname',
        'oid' => 'oid',
        'titel' => 'titel',
        'vorname' => 'vorname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'freitext_titel' => 'setFreitextTitel',
        'geschaeftliche_e_mail_adresse' => 'setGeschaeftlicheEMailAdresse',
        'geschaeftliche_telefonnummer' => 'setGeschaeftlicheTelefonnummer',
        'nachname' => 'setNachname',
        'oid' => 'setOid',
        'titel' => 'setTitel',
        'vorname' => 'setVorname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'freitext_titel' => 'getFreitextTitel',
        'geschaeftliche_e_mail_adresse' => 'getGeschaeftlicheEMailAdresse',
        'geschaeftliche_telefonnummer' => 'getGeschaeftlicheTelefonnummer',
        'nachname' => 'getNachname',
        'oid' => 'getOid',
        'titel' => 'getTitel',
        'vorname' => 'getVorname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['freitext_titel'] = isset($data['freitext_titel']) ? $data['freitext_titel'] : null;
        $this->container['geschaeftliche_e_mail_adresse'] = isset($data['geschaeftliche_e_mail_adresse']) ? $data['geschaeftliche_e_mail_adresse'] : null;
        $this->container['geschaeftliche_telefonnummer'] = isset($data['geschaeftliche_telefonnummer']) ? $data['geschaeftliche_telefonnummer'] : null;
        $this->container['nachname'] = isset($data['nachname']) ? $data['nachname'] : null;
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['titel'] = isset($data['titel']) ? $data['titel'] : null;
        $this->container['vorname'] = isset($data['vorname']) ? $data['vorname'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets freitext_titel
     *
     * @return string
     */
    public function getFreitextTitel()
    {
        return $this->container['freitext_titel'];
    }

    /**
     * Sets freitext_titel
     *
     * @param string $freitext_titel Titel (Freitext) des Sachbearbeiters
     *
     * @return $this
     */
    public function setFreitextTitel($freitext_titel)
    {
        $this->container['freitext_titel'] = $freitext_titel;

        return $this;
    }

    /**
     * Gets geschaeftliche_e_mail_adresse
     *
     * @return string
     */
    public function getGeschaeftlicheEMailAdresse()
    {
        return $this->container['geschaeftliche_e_mail_adresse'];
    }

    /**
     * Sets geschaeftliche_e_mail_adresse
     *
     * @param string $geschaeftliche_e_mail_adresse Die geschäftliche E-Mail-Adresse des Sachbearbeiters
     *
     * @return $this
     */
    public function setGeschaeftlicheEMailAdresse($geschaeftliche_e_mail_adresse)
    {
        $this->container['geschaeftliche_e_mail_adresse'] = $geschaeftliche_e_mail_adresse;

        return $this;
    }

    /**
     * Gets geschaeftliche_telefonnummer
     *
     * @return string
     */
    public function getGeschaeftlicheTelefonnummer()
    {
        return $this->container['geschaeftliche_telefonnummer'];
    }

    /**
     * Sets geschaeftliche_telefonnummer
     *
     * @param string $geschaeftliche_telefonnummer Telefonnummer des Sachbearbeiters
     *
     * @return $this
     */
    public function setGeschaeftlicheTelefonnummer($geschaeftliche_telefonnummer)
    {
        $this->container['geschaeftliche_telefonnummer'] = $geschaeftliche_telefonnummer;

        return $this;
    }

    /**
     * Gets nachname
     *
     * @return string
     */
    public function getNachname()
    {
        return $this->container['nachname'];
    }

    /**
     * Sets nachname
     *
     * @param string $nachname Nachname des Sachbearbeiters
     *
     * @return $this
     */
    public function setNachname($nachname)
    {
        $this->container['nachname'] = $nachname;

        return $this;
    }

    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid Eindeutige ID des Sachbearbeiters
     *
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets titel
     *
     * @return string
     */
    public function getTitel()
    {
        return $this->container['titel'];
    }

    /**
     * Sets titel
     *
     * @param string $titel Titel des Sachbearbeiters
     *
     * @return $this
     */
    public function setTitel($titel)
    {
        $this->container['titel'] = $titel;

        return $this;
    }

    /**
     * Gets vorname
     *
     * @return string
     */
    public function getVorname()
    {
        return $this->container['vorname'];
    }

    /**
     * Sets vorname
     *
     * @param string $vorname Vorname des Sachbearbeiters
     *
     * @return $this
     */
    public function setVorname($vorname)
    {
        $this->container['vorname'] = $vorname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


