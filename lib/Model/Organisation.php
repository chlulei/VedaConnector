<?php
/**
 * Organisation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Organisation Class Doc Comment
 *
 * @category Class
 * @description Beschreibt eine Organisation
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Organisation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Organisation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oid' => 'string',
        'adresse' => '\Swagger\Client\Model\Adresse',
        'aufsichtsperson_e_mail' => 'string',
        'aufsichtsperson_name' => 'string',
        'links' => '\Swagger\Client\Model\Link[]',
        'mitgliedsnummer' => 'string',
        'organisationsart_kurzbezeichnung' => 'string',
        'organisationsname1' => 'string',
        'organisationsname2' => 'string',
        'organisationsname3' => 'string',
        'organisationsname4' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oid' => null,
        'adresse' => null,
        'aufsichtsperson_e_mail' => null,
        'aufsichtsperson_name' => null,
        'links' => null,
        'mitgliedsnummer' => null,
        'organisationsart_kurzbezeichnung' => null,
        'organisationsname1' => null,
        'organisationsname2' => null,
        'organisationsname3' => null,
        'organisationsname4' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'adresse' => 'adresse',
        'aufsichtsperson_e_mail' => 'aufsichtspersonEMail',
        'aufsichtsperson_name' => 'aufsichtspersonName',
        'links' => 'links',
        'mitgliedsnummer' => 'mitgliedsnummer',
        'organisationsart_kurzbezeichnung' => 'organisationsartKurzbezeichnung',
        'organisationsname1' => 'organisationsname1',
        'organisationsname2' => 'organisationsname2',
        'organisationsname3' => 'organisationsname3',
        'organisationsname4' => 'organisationsname4'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'adresse' => 'setAdresse',
        'aufsichtsperson_e_mail' => 'setAufsichtspersonEMail',
        'aufsichtsperson_name' => 'setAufsichtspersonName',
        'links' => 'setLinks',
        'mitgliedsnummer' => 'setMitgliedsnummer',
        'organisationsart_kurzbezeichnung' => 'setOrganisationsartKurzbezeichnung',
        'organisationsname1' => 'setOrganisationsname1',
        'organisationsname2' => 'setOrganisationsname2',
        'organisationsname3' => 'setOrganisationsname3',
        'organisationsname4' => 'setOrganisationsname4'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'adresse' => 'getAdresse',
        'aufsichtsperson_e_mail' => 'getAufsichtspersonEMail',
        'aufsichtsperson_name' => 'getAufsichtspersonName',
        'links' => 'getLinks',
        'mitgliedsnummer' => 'getMitgliedsnummer',
        'organisationsart_kurzbezeichnung' => 'getOrganisationsartKurzbezeichnung',
        'organisationsname1' => 'getOrganisationsname1',
        'organisationsname2' => 'getOrganisationsname2',
        'organisationsname3' => 'getOrganisationsname3',
        'organisationsname4' => 'getOrganisationsname4'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['adresse'] = isset($data['adresse']) ? $data['adresse'] : null;
        $this->container['aufsichtsperson_e_mail'] = isset($data['aufsichtsperson_e_mail']) ? $data['aufsichtsperson_e_mail'] : null;
        $this->container['aufsichtsperson_name'] = isset($data['aufsichtsperson_name']) ? $data['aufsichtsperson_name'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['mitgliedsnummer'] = isset($data['mitgliedsnummer']) ? $data['mitgliedsnummer'] : null;
        $this->container['organisationsart_kurzbezeichnung'] = isset($data['organisationsart_kurzbezeichnung']) ? $data['organisationsart_kurzbezeichnung'] : null;
        $this->container['organisationsname1'] = isset($data['organisationsname1']) ? $data['organisationsname1'] : null;
        $this->container['organisationsname2'] = isset($data['organisationsname2']) ? $data['organisationsname2'] : null;
        $this->container['organisationsname3'] = isset($data['organisationsname3']) ? $data['organisationsname3'] : null;
        $this->container['organisationsname4'] = isset($data['organisationsname4']) ? $data['organisationsname4'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets adresse
     *
     * @return \Swagger\Client\Model\Adresse
     */
    public function getAdresse()
    {
        return $this->container['adresse'];
    }

    /**
     * Sets adresse
     *
     * @param \Swagger\Client\Model\Adresse $adresse Adresse der Organisation
     *
     * @return $this
     */
    public function setAdresse($adresse)
    {
        $this->container['adresse'] = $adresse;

        return $this;
    }

    /**
     * Gets aufsichtsperson_e_mail
     *
     * @return string
     */
    public function getAufsichtspersonEMail()
    {
        return $this->container['aufsichtsperson_e_mail'];
    }

    /**
     * Sets aufsichtsperson_e_mail
     *
     * @param string $aufsichtsperson_e_mail E-Mail-Adresse der Aufsichtsperson
     *
     * @return $this
     */
    public function setAufsichtspersonEMail($aufsichtsperson_e_mail)
    {
        $this->container['aufsichtsperson_e_mail'] = $aufsichtsperson_e_mail;

        return $this;
    }

    /**
     * Gets aufsichtsperson_name
     *
     * @return string
     */
    public function getAufsichtspersonName()
    {
        return $this->container['aufsichtsperson_name'];
    }

    /**
     * Sets aufsichtsperson_name
     *
     * @param string $aufsichtsperson_name Name der Aufsichtsperson
     *
     * @return $this
     */
    public function setAufsichtspersonName($aufsichtsperson_name)
    {
        $this->container['aufsichtsperson_name'] = $aufsichtsperson_name;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets mitgliedsnummer
     *
     * @return string
     */
    public function getMitgliedsnummer()
    {
        return $this->container['mitgliedsnummer'];
    }

    /**
     * Sets mitgliedsnummer
     *
     * @param string $mitgliedsnummer Die Mitgliedsnummer
     *
     * @return $this
     */
    public function setMitgliedsnummer($mitgliedsnummer)
    {
        $this->container['mitgliedsnummer'] = $mitgliedsnummer;

        return $this;
    }

    /**
     * Gets organisationsart_kurzbezeichnung
     *
     * @return string
     */
    public function getOrganisationsartKurzbezeichnung()
    {
        return $this->container['organisationsart_kurzbezeichnung'];
    }

    /**
     * Sets organisationsart_kurzbezeichnung
     *
     * @param string $organisationsart_kurzbezeichnung K체rzel f체r die Art der Organisation
     *
     * @return $this
     */
    public function setOrganisationsartKurzbezeichnung($organisationsart_kurzbezeichnung)
    {
        $this->container['organisationsart_kurzbezeichnung'] = $organisationsart_kurzbezeichnung;

        return $this;
    }

    /**
     * Gets organisationsname1
     *
     * @return string
     */
    public function getOrganisationsname1()
    {
        return $this->container['organisationsname1'];
    }

    /**
     * Sets organisationsname1
     *
     * @param string $organisationsname1 Name 1 der Organisation
     *
     * @return $this
     */
    public function setOrganisationsname1($organisationsname1)
    {
        $this->container['organisationsname1'] = $organisationsname1;

        return $this;
    }

    /**
     * Gets organisationsname2
     *
     * @return string
     */
    public function getOrganisationsname2()
    {
        return $this->container['organisationsname2'];
    }

    /**
     * Sets organisationsname2
     *
     * @param string $organisationsname2 Name 2 der Organisation (weiterf체hrend)
     *
     * @return $this
     */
    public function setOrganisationsname2($organisationsname2)
    {
        $this->container['organisationsname2'] = $organisationsname2;

        return $this;
    }

    /**
     * Gets organisationsname3
     *
     * @return string
     */
    public function getOrganisationsname3()
    {
        return $this->container['organisationsname3'];
    }

    /**
     * Sets organisationsname3
     *
     * @param string $organisationsname3 Name 3 der Organisation (weiterf체hrend)
     *
     * @return $this
     */
    public function setOrganisationsname3($organisationsname3)
    {
        $this->container['organisationsname3'] = $organisationsname3;

        return $this;
    }

    /**
     * Gets organisationsname4
     *
     * @return string
     */
    public function getOrganisationsname4()
    {
        return $this->container['organisationsname4'];
    }

    /**
     * Sets organisationsname4
     *
     * @param string $organisationsname4 Name 4 der Organisation (weiterf체hrend)
     *
     * @return $this
     */
    public function setOrganisationsname4($organisationsname4)
    {
        $this->container['organisationsname4'] = $organisationsname4;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


