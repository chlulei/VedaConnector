<?php
/**
 * Veranstaltungstyp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Veranstaltungstyp Class Doc Comment
 *
 * @category Class
 * @description Ein Veranstaltungstyp mit seinen relevanten Daten.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Veranstaltungstyp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Veranstaltungstyp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oid' => 'string',
        'anzahl_teilnehmertage' => 'float',
        'anzahl_ue' => 'float',
        'beschreibung' => 'string',
        'dauer_in_tagen' => 'float',
        'gueltig_ab' => '\DateTime',
        'gueltig_bis' => '\DateTime',
        'hinweise' => 'string',
        'inhalt' => 'string',
        'kurzbezeichnung' => 'string',
        'links' => '\Swagger\Client\Model\Link[]',
        'methodik' => 'string',
        'regulaere_uhrzeit_bis' => 'string',
        'regulaere_uhrzeit_von' => 'string',
        'teilnehmermaximum' => 'int',
        'teilnehmerminimum' => 'int',
        'thema' => 'string',
        'thema2' => 'string',
        'uhrzeit_bis' => 'string',
        'uhrzeit_von' => 'string',
        'veranstaltungs_nr' => 'string',
        'veranstaltungsart' => 'string',
        'veranstaltungskategorie' => '\Swagger\Client\Model\Veranstaltungskategorie',
        'voraussetzung' => 'string',
        'wbd_relevant' => 'bool',
        'wbd_thema' => 'string',
        'ziel' => 'string',
        'zielgruppen' => '\Swagger\Client\Model\Zielgruppe[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oid' => null,
        'anzahl_teilnehmertage' => null,
        'anzahl_ue' => null,
        'beschreibung' => null,
        'dauer_in_tagen' => null,
        'gueltig_ab' => 'date',
        'gueltig_bis' => 'date',
        'hinweise' => null,
        'inhalt' => null,
        'kurzbezeichnung' => null,
        'links' => null,
        'methodik' => null,
        'regulaere_uhrzeit_bis' => null,
        'regulaere_uhrzeit_von' => null,
        'teilnehmermaximum' => null,
        'teilnehmerminimum' => null,
        'thema' => null,
        'thema2' => null,
        'uhrzeit_bis' => null,
        'uhrzeit_von' => null,
        'veranstaltungs_nr' => null,
        'veranstaltungsart' => null,
        'veranstaltungskategorie' => null,
        'voraussetzung' => null,
        'wbd_relevant' => null,
        'wbd_thema' => null,
        'ziel' => null,
        'zielgruppen' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'anzahl_teilnehmertage' => 'anzahlTeilnehmertage',
        'anzahl_ue' => 'anzahlUE',
        'beschreibung' => 'beschreibung',
        'dauer_in_tagen' => 'dauerInTagen',
        'gueltig_ab' => 'gueltigAb',
        'gueltig_bis' => 'gueltigBis',
        'hinweise' => 'hinweise',
        'inhalt' => 'inhalt',
        'kurzbezeichnung' => 'kurzbezeichnung',
        'links' => 'links',
        'methodik' => 'methodik',
        'regulaere_uhrzeit_bis' => 'regulaereUhrzeitBis',
        'regulaere_uhrzeit_von' => 'regulaereUhrzeitVon',
        'teilnehmermaximum' => 'teilnehmermaximum',
        'teilnehmerminimum' => 'teilnehmerminimum',
        'thema' => 'thema',
        'thema2' => 'thema2',
        'uhrzeit_bis' => 'uhrzeitBis',
        'uhrzeit_von' => 'uhrzeitVon',
        'veranstaltungs_nr' => 'veranstaltungsNr',
        'veranstaltungsart' => 'veranstaltungsart',
        'veranstaltungskategorie' => 'veranstaltungskategorie',
        'voraussetzung' => 'voraussetzung',
        'wbd_relevant' => 'wbdRelevant',
        'wbd_thema' => 'wbdThema',
        'ziel' => 'ziel',
        'zielgruppen' => 'zielgruppen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'anzahl_teilnehmertage' => 'setAnzahlTeilnehmertage',
        'anzahl_ue' => 'setAnzahlUe',
        'beschreibung' => 'setBeschreibung',
        'dauer_in_tagen' => 'setDauerInTagen',
        'gueltig_ab' => 'setGueltigAb',
        'gueltig_bis' => 'setGueltigBis',
        'hinweise' => 'setHinweise',
        'inhalt' => 'setInhalt',
        'kurzbezeichnung' => 'setKurzbezeichnung',
        'links' => 'setLinks',
        'methodik' => 'setMethodik',
        'regulaere_uhrzeit_bis' => 'setRegulaereUhrzeitBis',
        'regulaere_uhrzeit_von' => 'setRegulaereUhrzeitVon',
        'teilnehmermaximum' => 'setTeilnehmermaximum',
        'teilnehmerminimum' => 'setTeilnehmerminimum',
        'thema' => 'setThema',
        'thema2' => 'setThema2',
        'uhrzeit_bis' => 'setUhrzeitBis',
        'uhrzeit_von' => 'setUhrzeitVon',
        'veranstaltungs_nr' => 'setVeranstaltungsNr',
        'veranstaltungsart' => 'setVeranstaltungsart',
        'veranstaltungskategorie' => 'setVeranstaltungskategorie',
        'voraussetzung' => 'setVoraussetzung',
        'wbd_relevant' => 'setWbdRelevant',
        'wbd_thema' => 'setWbdThema',
        'ziel' => 'setZiel',
        'zielgruppen' => 'setZielgruppen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'anzahl_teilnehmertage' => 'getAnzahlTeilnehmertage',
        'anzahl_ue' => 'getAnzahlUe',
        'beschreibung' => 'getBeschreibung',
        'dauer_in_tagen' => 'getDauerInTagen',
        'gueltig_ab' => 'getGueltigAb',
        'gueltig_bis' => 'getGueltigBis',
        'hinweise' => 'getHinweise',
        'inhalt' => 'getInhalt',
        'kurzbezeichnung' => 'getKurzbezeichnung',
        'links' => 'getLinks',
        'methodik' => 'getMethodik',
        'regulaere_uhrzeit_bis' => 'getRegulaereUhrzeitBis',
        'regulaere_uhrzeit_von' => 'getRegulaereUhrzeitVon',
        'teilnehmermaximum' => 'getTeilnehmermaximum',
        'teilnehmerminimum' => 'getTeilnehmerminimum',
        'thema' => 'getThema',
        'thema2' => 'getThema2',
        'uhrzeit_bis' => 'getUhrzeitBis',
        'uhrzeit_von' => 'getUhrzeitVon',
        'veranstaltungs_nr' => 'getVeranstaltungsNr',
        'veranstaltungsart' => 'getVeranstaltungsart',
        'veranstaltungskategorie' => 'getVeranstaltungskategorie',
        'voraussetzung' => 'getVoraussetzung',
        'wbd_relevant' => 'getWbdRelevant',
        'wbd_thema' => 'getWbdThema',
        'ziel' => 'getZiel',
        'zielgruppen' => 'getZielgruppen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['anzahl_teilnehmertage'] = isset($data['anzahl_teilnehmertage']) ? $data['anzahl_teilnehmertage'] : null;
        $this->container['anzahl_ue'] = isset($data['anzahl_ue']) ? $data['anzahl_ue'] : null;
        $this->container['beschreibung'] = isset($data['beschreibung']) ? $data['beschreibung'] : null;
        $this->container['dauer_in_tagen'] = isset($data['dauer_in_tagen']) ? $data['dauer_in_tagen'] : null;
        $this->container['gueltig_ab'] = isset($data['gueltig_ab']) ? $data['gueltig_ab'] : null;
        $this->container['gueltig_bis'] = isset($data['gueltig_bis']) ? $data['gueltig_bis'] : null;
        $this->container['hinweise'] = isset($data['hinweise']) ? $data['hinweise'] : null;
        $this->container['inhalt'] = isset($data['inhalt']) ? $data['inhalt'] : null;
        $this->container['kurzbezeichnung'] = isset($data['kurzbezeichnung']) ? $data['kurzbezeichnung'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['methodik'] = isset($data['methodik']) ? $data['methodik'] : null;
        $this->container['regulaere_uhrzeit_bis'] = isset($data['regulaere_uhrzeit_bis']) ? $data['regulaere_uhrzeit_bis'] : null;
        $this->container['regulaere_uhrzeit_von'] = isset($data['regulaere_uhrzeit_von']) ? $data['regulaere_uhrzeit_von'] : null;
        $this->container['teilnehmermaximum'] = isset($data['teilnehmermaximum']) ? $data['teilnehmermaximum'] : null;
        $this->container['teilnehmerminimum'] = isset($data['teilnehmerminimum']) ? $data['teilnehmerminimum'] : null;
        $this->container['thema'] = isset($data['thema']) ? $data['thema'] : null;
        $this->container['thema2'] = isset($data['thema2']) ? $data['thema2'] : null;
        $this->container['uhrzeit_bis'] = isset($data['uhrzeit_bis']) ? $data['uhrzeit_bis'] : null;
        $this->container['uhrzeit_von'] = isset($data['uhrzeit_von']) ? $data['uhrzeit_von'] : null;
        $this->container['veranstaltungs_nr'] = isset($data['veranstaltungs_nr']) ? $data['veranstaltungs_nr'] : null;
        $this->container['veranstaltungsart'] = isset($data['veranstaltungsart']) ? $data['veranstaltungsart'] : null;
        $this->container['veranstaltungskategorie'] = isset($data['veranstaltungskategorie']) ? $data['veranstaltungskategorie'] : null;
        $this->container['voraussetzung'] = isset($data['voraussetzung']) ? $data['voraussetzung'] : null;
        $this->container['wbd_relevant'] = isset($data['wbd_relevant']) ? $data['wbd_relevant'] : null;
        $this->container['wbd_thema'] = isset($data['wbd_thema']) ? $data['wbd_thema'] : null;
        $this->container['ziel'] = isset($data['ziel']) ? $data['ziel'] : null;
        $this->container['zielgruppen'] = isset($data['zielgruppen']) ? $data['zielgruppen'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        if ($this->container['thema'] === null) {
            $invalidProperties[] = "'thema' can't be null";
        }
        if ($this->container['veranstaltungs_nr'] === null) {
            $invalidProperties[] = "'veranstaltungs_nr' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets anzahl_teilnehmertage
     *
     * @return float
     */
    public function getAnzahlTeilnehmertage()
    {
        return $this->container['anzahl_teilnehmertage'];
    }

    /**
     * Sets anzahl_teilnehmertage
     *
     * @param float $anzahl_teilnehmertage Die Anzahl der Teilnehmertage des Veranstaltungstyps
     *
     * @return $this
     */
    public function setAnzahlTeilnehmertage($anzahl_teilnehmertage)
    {
        $this->container['anzahl_teilnehmertage'] = $anzahl_teilnehmertage;

        return $this;
    }

    /**
     * Gets anzahl_ue
     *
     * @return float
     */
    public function getAnzahlUe()
    {
        return $this->container['anzahl_ue'];
    }

    /**
     * Sets anzahl_ue
     *
     * @param float $anzahl_ue Die Anzahl der Unterrichtseinheiten des Veranstaltungstyps
     *
     * @return $this
     */
    public function setAnzahlUe($anzahl_ue)
    {
        $this->container['anzahl_ue'] = $anzahl_ue;

        return $this;
    }

    /**
     * Gets beschreibung
     *
     * @return string
     */
    public function getBeschreibung()
    {
        return $this->container['beschreibung'];
    }

    /**
     * Sets beschreibung
     *
     * @param string $beschreibung Die Beschreibung des Veranstaltungstyps (HTML m철glich)
     *
     * @return $this
     */
    public function setBeschreibung($beschreibung)
    {
        $this->container['beschreibung'] = $beschreibung;

        return $this;
    }

    /**
     * Gets dauer_in_tagen
     *
     * @return float
     */
    public function getDauerInTagen()
    {
        return $this->container['dauer_in_tagen'];
    }

    /**
     * Sets dauer_in_tagen
     *
     * @param float $dauer_in_tagen Die Dauer in Tagen des Veranstaltungstyps
     *
     * @return $this
     */
    public function setDauerInTagen($dauer_in_tagen)
    {
        $this->container['dauer_in_tagen'] = $dauer_in_tagen;

        return $this;
    }

    /**
     * Gets gueltig_ab
     *
     * @return \DateTime
     */
    public function getGueltigAb()
    {
        return $this->container['gueltig_ab'];
    }

    /**
     * Sets gueltig_ab
     *
     * @param \DateTime $gueltig_ab Der G체ltigkeitsbeginn des Veranstaltungstyps
     *
     * @return $this
     */
    public function setGueltigAb($gueltig_ab)
    {
        $this->container['gueltig_ab'] = $gueltig_ab;

        return $this;
    }

    /**
     * Gets gueltig_bis
     *
     * @return \DateTime
     */
    public function getGueltigBis()
    {
        return $this->container['gueltig_bis'];
    }

    /**
     * Sets gueltig_bis
     *
     * @param \DateTime $gueltig_bis Das G체ltigkeitsende des Veranstaltungstyps
     *
     * @return $this
     */
    public function setGueltigBis($gueltig_bis)
    {
        $this->container['gueltig_bis'] = $gueltig_bis;

        return $this;
    }

    /**
     * Gets hinweise
     *
     * @return string
     */
    public function getHinweise()
    {
        return $this->container['hinweise'];
    }

    /**
     * Sets hinweise
     *
     * @param string $hinweise Hinweise zum Veranstaltungstyp
     *
     * @return $this
     */
    public function setHinweise($hinweise)
    {
        $this->container['hinweise'] = $hinweise;

        return $this;
    }

    /**
     * Gets inhalt
     *
     * @return string
     */
    public function getInhalt()
    {
        return $this->container['inhalt'];
    }

    /**
     * Sets inhalt
     *
     * @param string $inhalt Der Inhalt des Veranstaltungstyps (HTML m철glich)
     *
     * @return $this
     */
    public function setInhalt($inhalt)
    {
        $this->container['inhalt'] = $inhalt;

        return $this;
    }

    /**
     * Gets kurzbezeichnung
     *
     * @return string
     */
    public function getKurzbezeichnung()
    {
        return $this->container['kurzbezeichnung'];
    }

    /**
     * Sets kurzbezeichnung
     *
     * @param string $kurzbezeichnung Die Kurzbezeichnung des Veranstaltungstyps
     *
     * @return $this
     */
    public function setKurzbezeichnung($kurzbezeichnung)
    {
        $this->container['kurzbezeichnung'] = $kurzbezeichnung;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets methodik
     *
     * @return string
     */
    public function getMethodik()
    {
        return $this->container['methodik'];
    }

    /**
     * Sets methodik
     *
     * @param string $methodik Die Methodik des Veranstaltungstyps (HTML m철glich)
     *
     * @return $this
     */
    public function setMethodik($methodik)
    {
        $this->container['methodik'] = $methodik;

        return $this;
    }

    /**
     * Gets regulaere_uhrzeit_bis
     *
     * @return string
     */
    public function getRegulaereUhrzeitBis()
    {
        return $this->container['regulaere_uhrzeit_bis'];
    }

    /**
     * Sets regulaere_uhrzeit_bis
     *
     * @param string $regulaere_uhrzeit_bis Die Regul채re bis Uhrzeit des Veranstaltungstyps.
     *
     * @return $this
     */
    public function setRegulaereUhrzeitBis($regulaere_uhrzeit_bis)
    {
        $this->container['regulaere_uhrzeit_bis'] = $regulaere_uhrzeit_bis;

        return $this;
    }

    /**
     * Gets regulaere_uhrzeit_von
     *
     * @return string
     */
    public function getRegulaereUhrzeitVon()
    {
        return $this->container['regulaere_uhrzeit_von'];
    }

    /**
     * Sets regulaere_uhrzeit_von
     *
     * @param string $regulaere_uhrzeit_von Die Regul채re von Uhrzeit des Veranstaltungstyps.
     *
     * @return $this
     */
    public function setRegulaereUhrzeitVon($regulaere_uhrzeit_von)
    {
        $this->container['regulaere_uhrzeit_von'] = $regulaere_uhrzeit_von;

        return $this;
    }

    /**
     * Gets teilnehmermaximum
     *
     * @return int
     */
    public function getTeilnehmermaximum()
    {
        return $this->container['teilnehmermaximum'];
    }

    /**
     * Sets teilnehmermaximum
     *
     * @param int $teilnehmermaximum Das Teilnehmermaximum des Veranstaltungstyps
     *
     * @return $this
     */
    public function setTeilnehmermaximum($teilnehmermaximum)
    {
        $this->container['teilnehmermaximum'] = $teilnehmermaximum;

        return $this;
    }

    /**
     * Gets teilnehmerminimum
     *
     * @return int
     */
    public function getTeilnehmerminimum()
    {
        return $this->container['teilnehmerminimum'];
    }

    /**
     * Sets teilnehmerminimum
     *
     * @param int $teilnehmerminimum Das Teilnehmerminimum des Veranstaltungstyps
     *
     * @return $this
     */
    public function setTeilnehmerminimum($teilnehmerminimum)
    {
        $this->container['teilnehmerminimum'] = $teilnehmerminimum;

        return $this;
    }

    /**
     * Gets thema
     *
     * @return string
     */
    public function getThema()
    {
        return $this->container['thema'];
    }

    /**
     * Sets thema
     *
     * @param string $thema Das Thema des Veranstaltungstyps
     *
     * @return $this
     */
    public function setThema($thema)
    {
        $this->container['thema'] = $thema;

        return $this;
    }

    /**
     * Gets thema2
     *
     * @return string
     */
    public function getThema2()
    {
        return $this->container['thema2'];
    }

    /**
     * Sets thema2
     *
     * @param string $thema2 Thema 2 des Veranstaltungstyps
     *
     * @return $this
     */
    public function setThema2($thema2)
    {
        $this->container['thema2'] = $thema2;

        return $this;
    }

    /**
     * Gets uhrzeit_bis
     *
     * @return string
     */
    public function getUhrzeitBis()
    {
        return $this->container['uhrzeit_bis'];
    }

    /**
     * Sets uhrzeit_bis
     *
     * @param string $uhrzeit_bis Die bis Uhrzeit des Veranstaltungstyps, am letzten Tag des Veranstaltungstyps.
     *
     * @return $this
     */
    public function setUhrzeitBis($uhrzeit_bis)
    {
        $this->container['uhrzeit_bis'] = $uhrzeit_bis;

        return $this;
    }

    /**
     * Gets uhrzeit_von
     *
     * @return string
     */
    public function getUhrzeitVon()
    {
        return $this->container['uhrzeit_von'];
    }

    /**
     * Sets uhrzeit_von
     *
     * @param string $uhrzeit_von Die von Uhrzeit des Veranstaltungstyps, am ersten Tag des Veranstaltungstyps.
     *
     * @return $this
     */
    public function setUhrzeitVon($uhrzeit_von)
    {
        $this->container['uhrzeit_von'] = $uhrzeit_von;

        return $this;
    }

    /**
     * Gets veranstaltungs_nr
     *
     * @return string
     */
    public function getVeranstaltungsNr()
    {
        return $this->container['veranstaltungs_nr'];
    }

    /**
     * Sets veranstaltungs_nr
     *
     * @param string $veranstaltungs_nr Die Veranstaltungs-Nr. des Veranstaltungstyps
     *
     * @return $this
     */
    public function setVeranstaltungsNr($veranstaltungs_nr)
    {
        $this->container['veranstaltungs_nr'] = $veranstaltungs_nr;

        return $this;
    }

    /**
     * Gets veranstaltungsart
     *
     * @return string
     */
    public function getVeranstaltungsart()
    {
        return $this->container['veranstaltungsart'];
    }

    /**
     * Sets veranstaltungsart
     *
     * @param string $veranstaltungsart Veranstaltungsart des Veranstaltungstyps, zul채ssig sind hier VIRTUELL und PRAESENZ.
     *
     * @return $this
     */
    public function setVeranstaltungsart($veranstaltungsart)
    {
        $this->container['veranstaltungsart'] = $veranstaltungsart;

        return $this;
    }

    /**
     * Gets veranstaltungskategorie
     *
     * @return \Swagger\Client\Model\Veranstaltungskategorie
     */
    public function getVeranstaltungskategorie()
    {
        return $this->container['veranstaltungskategorie'];
    }

    /**
     * Sets veranstaltungskategorie
     *
     * @param \Swagger\Client\Model\Veranstaltungskategorie $veranstaltungskategorie Die Kategorie, der der Veranstaltungstyp zugeordnet ist.
     *
     * @return $this
     */
    public function setVeranstaltungskategorie($veranstaltungskategorie)
    {
        $this->container['veranstaltungskategorie'] = $veranstaltungskategorie;

        return $this;
    }

    /**
     * Gets voraussetzung
     *
     * @return string
     */
    public function getVoraussetzung()
    {
        return $this->container['voraussetzung'];
    }

    /**
     * Sets voraussetzung
     *
     * @param string $voraussetzung Die Voraussetzungen f체r den Veranstaltungstyp (HTML m철glich)
     *
     * @return $this
     */
    public function setVoraussetzung($voraussetzung)
    {
        $this->container['voraussetzung'] = $voraussetzung;

        return $this;
    }

    /**
     * Gets wbd_relevant
     *
     * @return bool
     */
    public function getWbdRelevant()
    {
        return $this->container['wbd_relevant'];
    }

    /**
     * Sets wbd_relevant
     *
     * @param bool $wbd_relevant Dieses Kennzeichen gibt an, ob der Veranstaltungstyp relevant f체r die Weiterbildungsdatenbank(WBD) ist
     *
     * @return $this
     */
    public function setWbdRelevant($wbd_relevant)
    {
        $this->container['wbd_relevant'] = $wbd_relevant;

        return $this;
    }

    /**
     * Gets wbd_thema
     *
     * @return string
     */
    public function getWbdThema()
    {
        return $this->container['wbd_thema'];
    }

    /**
     * Sets wbd_thema
     *
     * @param string $wbd_thema Das WBD-Thema des Veranstaltungstyps
     *
     * @return $this
     */
    public function setWbdThema($wbd_thema)
    {
        $this->container['wbd_thema'] = $wbd_thema;

        return $this;
    }

    /**
     * Gets ziel
     *
     * @return string
     */
    public function getZiel()
    {
        return $this->container['ziel'];
    }

    /**
     * Sets ziel
     *
     * @param string $ziel Die Ziele des Veranstaltungstyps (HTML m철glich)
     *
     * @return $this
     */
    public function setZiel($ziel)
    {
        $this->container['ziel'] = $ziel;

        return $this;
    }

    /**
     * Gets zielgruppen
     *
     * @return \Swagger\Client\Model\Zielgruppe[]
     */
    public function getZielgruppen()
    {
        return $this->container['zielgruppen'];
    }

    /**
     * Sets zielgruppen
     *
     * @param \Swagger\Client\Model\Zielgruppe[] $zielgruppen Die Zielgruppen f체r den Veranstaltungstyp.
     *
     * @return $this
     */
    public function setZielgruppen($zielgruppen)
    {
        $this->container['zielgruppen'] = $zielgruppen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


