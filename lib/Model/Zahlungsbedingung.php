<?php
/**
 * Zahlungsbedingung
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers f체r die Version 2. Die Dokumentation zu speziellen Versionen kann 체ber die Angabe des zus채tzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 f체r die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Zahlungsbedingung Class Doc Comment
 *
 * @category Class
 * @description Die Informationen zu einer Zahlungsbedingung.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Zahlungsbedingung implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Zahlungsbedingung';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'anpassung_der_basis' => 'int',
        'anzahl_raten' => 'int',
        'basis' => 'string',
        'bezeichnung' => 'string',
        'ext_referenz_number' => 'string',
        'oid' => 'string',
        'rechnungstext' => 'string',
        'zahlungsweise' => 'string',
        'zahlungsziel' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'anpassung_der_basis' => null,
        'anzahl_raten' => null,
        'basis' => null,
        'bezeichnung' => null,
        'ext_referenz_number' => null,
        'oid' => null,
        'rechnungstext' => null,
        'zahlungsweise' => null,
        'zahlungsziel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anpassung_der_basis' => 'anpassungDerBasis',
        'anzahl_raten' => 'anzahlRaten',
        'basis' => 'basis',
        'bezeichnung' => 'bezeichnung',
        'ext_referenz_number' => 'extReferenzNumber',
        'oid' => 'oid',
        'rechnungstext' => 'rechnungstext',
        'zahlungsweise' => 'zahlungsweise',
        'zahlungsziel' => 'zahlungsziel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anpassung_der_basis' => 'setAnpassungDerBasis',
        'anzahl_raten' => 'setAnzahlRaten',
        'basis' => 'setBasis',
        'bezeichnung' => 'setBezeichnung',
        'ext_referenz_number' => 'setExtReferenzNumber',
        'oid' => 'setOid',
        'rechnungstext' => 'setRechnungstext',
        'zahlungsweise' => 'setZahlungsweise',
        'zahlungsziel' => 'setZahlungsziel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anpassung_der_basis' => 'getAnpassungDerBasis',
        'anzahl_raten' => 'getAnzahlRaten',
        'basis' => 'getBasis',
        'bezeichnung' => 'getBezeichnung',
        'ext_referenz_number' => 'getExtReferenzNumber',
        'oid' => 'getOid',
        'rechnungstext' => 'getRechnungstext',
        'zahlungsweise' => 'getZahlungsweise',
        'zahlungsziel' => 'getZahlungsziel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ZAHLUNGSWEISE_EINMALZAHLUNG = 'Einmalzahlung';
    const ZAHLUNGSWEISE_RATENZAHLUNG = 'Ratenzahlung';
    const ZAHLUNGSWEISE_TEILZAHLUNG = 'Teilzahlung';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getZahlungsweiseAllowableValues()
    {
        return [
            self::ZAHLUNGSWEISE_EINMALZAHLUNG,
            self::ZAHLUNGSWEISE_RATENZAHLUNG,
            self::ZAHLUNGSWEISE_TEILZAHLUNG,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['anpassung_der_basis'] = isset($data['anpassung_der_basis']) ? $data['anpassung_der_basis'] : null;
        $this->container['anzahl_raten'] = isset($data['anzahl_raten']) ? $data['anzahl_raten'] : null;
        $this->container['basis'] = isset($data['basis']) ? $data['basis'] : null;
        $this->container['bezeichnung'] = isset($data['bezeichnung']) ? $data['bezeichnung'] : null;
        $this->container['ext_referenz_number'] = isset($data['ext_referenz_number']) ? $data['ext_referenz_number'] : null;
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['rechnungstext'] = isset($data['rechnungstext']) ? $data['rechnungstext'] : null;
        $this->container['zahlungsweise'] = isset($data['zahlungsweise']) ? $data['zahlungsweise'] : null;
        $this->container['zahlungsziel'] = isset($data['zahlungsziel']) ? $data['zahlungsziel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getZahlungsweiseAllowableValues();
        if (!is_null($this->container['zahlungsweise']) && !in_array($this->container['zahlungsweise'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'zahlungsweise', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anpassung_der_basis
     *
     * @return int
     */
    public function getAnpassungDerBasis()
    {
        return $this->container['anpassung_der_basis'];
    }

    /**
     * Sets anpassung_der_basis
     *
     * @param int $anpassung_der_basis Anpassung der Basis der Zahlungsbedingung
     *
     * @return $this
     */
    public function setAnpassungDerBasis($anpassung_der_basis)
    {
        $this->container['anpassung_der_basis'] = $anpassung_der_basis;

        return $this;
    }

    /**
     * Gets anzahl_raten
     *
     * @return int
     */
    public function getAnzahlRaten()
    {
        return $this->container['anzahl_raten'];
    }

    /**
     * Sets anzahl_raten
     *
     * @param int $anzahl_raten Anzahl Raten
     *
     * @return $this
     */
    public function setAnzahlRaten($anzahl_raten)
    {
        $this->container['anzahl_raten'] = $anzahl_raten;

        return $this;
    }

    /**
     * Gets basis
     *
     * @return string
     */
    public function getBasis()
    {
        return $this->container['basis'];
    }

    /**
     * Sets basis
     *
     * @param string $basis Basis der Zahlungsbedingung
     *
     * @return $this
     */
    public function setBasis($basis)
    {
        $this->container['basis'] = $basis;

        return $this;
    }

    /**
     * Gets bezeichnung
     *
     * @return string
     */
    public function getBezeichnung()
    {
        return $this->container['bezeichnung'];
    }

    /**
     * Sets bezeichnung
     *
     * @param string $bezeichnung Bezeichnung der Zahlungsbedingung
     *
     * @return $this
     */
    public function setBezeichnung($bezeichnung)
    {
        $this->container['bezeichnung'] = $bezeichnung;

        return $this;
    }

    /**
     * Gets ext_referenz_number
     *
     * @return string
     */
    public function getExtReferenzNumber()
    {
        return $this->container['ext_referenz_number'];
    }

    /**
     * Sets ext_referenz_number
     *
     * @param string $ext_referenz_number Externe Referenz-Nr. der Zahlungsbedingung
     *
     * @return $this
     */
    public function setExtReferenzNumber($ext_referenz_number)
    {
        $this->container['ext_referenz_number'] = $ext_referenz_number;

        return $this;
    }

    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid Eindeutige ID der Zahlungsbedingung
     *
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets rechnungstext
     *
     * @return string
     */
    public function getRechnungstext()
    {
        return $this->container['rechnungstext'];
    }

    /**
     * Sets rechnungstext
     *
     * @param string $rechnungstext Rechnungstext der Zahlungsbedingung
     *
     * @return $this
     */
    public function setRechnungstext($rechnungstext)
    {
        $this->container['rechnungstext'] = $rechnungstext;

        return $this;
    }

    /**
     * Gets zahlungsweise
     *
     * @return string
     */
    public function getZahlungsweise()
    {
        return $this->container['zahlungsweise'];
    }

    /**
     * Sets zahlungsweise
     *
     * @param string $zahlungsweise Zahlungsweise
     *
     * @return $this
     */
    public function setZahlungsweise($zahlungsweise)
    {
        $allowedValues = $this->getZahlungsweiseAllowableValues();
        if (!is_null($zahlungsweise) && !in_array($zahlungsweise, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'zahlungsweise', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['zahlungsweise'] = $zahlungsweise;

        return $this;
    }

    /**
     * Gets zahlungsziel
     *
     * @return int
     */
    public function getZahlungsziel()
    {
        return $this->container['zahlungsziel'];
    }

    /**
     * Sets zahlungsziel
     *
     * @param int $zahlungsziel Zahlungsziel (in Tagen)
     *
     * @return $this
     */
    public function setZahlungsziel($zahlungsziel)
    {
        $this->container['zahlungsziel'] = $zahlungsziel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


