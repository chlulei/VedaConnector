<?php
/**
 * Teilnehmer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Teilnehmer Class Doc Comment
 *
 * @category Class
 * @description Ein Teilnehmer mit den relevanten Daten.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Teilnehmer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Teilnehmer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oid' => 'string',
        'aktiv' => 'bool',
        'geburtsdatum' => '\DateTime',
        'geschaeftlich_organisation_id' => 'string',
        'geschaeftliche_e_mail_adresse' => 'string',
        'geschlecht' => 'string',
        'links' => '\Swagger\Client\Model\Link[]',
        'nachname' => 'string',
        'personen_nr' => 'string',
        'vorname' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oid' => null,
        'aktiv' => null,
        'geburtsdatum' => 'date',
        'geschaeftlich_organisation_id' => null,
        'geschaeftliche_e_mail_adresse' => null,
        'geschlecht' => null,
        'links' => null,
        'nachname' => null,
        'personen_nr' => null,
        'vorname' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oid' => 'oid',
        'aktiv' => 'aktiv',
        'geburtsdatum' => 'geburtsdatum',
        'geschaeftlich_organisation_id' => 'geschaeftlichOrganisationID',
        'geschaeftliche_e_mail_adresse' => 'geschaeftlicheEMailAdresse',
        'geschlecht' => 'geschlecht',
        'links' => 'links',
        'nachname' => 'nachname',
        'personen_nr' => 'personenNr',
        'vorname' => 'vorname'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oid' => 'setOid',
        'aktiv' => 'setAktiv',
        'geburtsdatum' => 'setGeburtsdatum',
        'geschaeftlich_organisation_id' => 'setGeschaeftlichOrganisationId',
        'geschaeftliche_e_mail_adresse' => 'setGeschaeftlicheEMailAdresse',
        'geschlecht' => 'setGeschlecht',
        'links' => 'setLinks',
        'nachname' => 'setNachname',
        'personen_nr' => 'setPersonenNr',
        'vorname' => 'setVorname'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oid' => 'getOid',
        'aktiv' => 'getAktiv',
        'geburtsdatum' => 'getGeburtsdatum',
        'geschaeftlich_organisation_id' => 'getGeschaeftlichOrganisationId',
        'geschaeftliche_e_mail_adresse' => 'getGeschaeftlicheEMailAdresse',
        'geschlecht' => 'getGeschlecht',
        'links' => 'getLinks',
        'nachname' => 'getNachname',
        'personen_nr' => 'getPersonenNr',
        'vorname' => 'getVorname'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GESCHLECHT_M = 'M';
    const GESCHLECHT_F = 'F';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGeschlechtAllowableValues()
    {
        return [
            self::GESCHLECHT_M,
            self::GESCHLECHT_F,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oid'] = isset($data['oid']) ? $data['oid'] : null;
        $this->container['aktiv'] = isset($data['aktiv']) ? $data['aktiv'] : null;
        $this->container['geburtsdatum'] = isset($data['geburtsdatum']) ? $data['geburtsdatum'] : null;
        $this->container['geschaeftlich_organisation_id'] = isset($data['geschaeftlich_organisation_id']) ? $data['geschaeftlich_organisation_id'] : null;
        $this->container['geschaeftliche_e_mail_adresse'] = isset($data['geschaeftliche_e_mail_adresse']) ? $data['geschaeftliche_e_mail_adresse'] : null;
        $this->container['geschlecht'] = isset($data['geschlecht']) ? $data['geschlecht'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['nachname'] = isset($data['nachname']) ? $data['nachname'] : null;
        $this->container['personen_nr'] = isset($data['personen_nr']) ? $data['personen_nr'] : null;
        $this->container['vorname'] = isset($data['vorname']) ? $data['vorname'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['oid'] === null) {
            $invalidProperties[] = "'oid' can't be null";
        }
        $allowedValues = $this->getGeschlechtAllowableValues();
        if (!is_null($this->container['geschlecht']) && !in_array($this->container['geschlecht'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'geschlecht', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['nachname'] === null) {
            $invalidProperties[] = "'nachname' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oid
     *
     * @return string
     */
    public function getOid()
    {
        return $this->container['oid'];
    }

    /**
     * Sets oid
     *
     * @param string $oid UUID des Datensatzes
     *
     * @return $this
     */
    public function setOid($oid)
    {
        $this->container['oid'] = $oid;

        return $this;
    }

    /**
     * Gets aktiv
     *
     * @return bool
     */
    public function getAktiv()
    {
        return $this->container['aktiv'];
    }

    /**
     * Sets aktiv
     *
     * @param bool $aktiv Der Aktivitätsstatus des Teilnehmers
     *
     * @return $this
     */
    public function setAktiv($aktiv)
    {
        $this->container['aktiv'] = $aktiv;

        return $this;
    }

    /**
     * Gets geburtsdatum
     *
     * @return \DateTime
     */
    public function getGeburtsdatum()
    {
        return $this->container['geburtsdatum'];
    }

    /**
     * Sets geburtsdatum
     *
     * @param \DateTime $geburtsdatum Das Geburtsdatum des Teilnehmers
     *
     * @return $this
     */
    public function setGeburtsdatum($geburtsdatum)
    {
        $this->container['geburtsdatum'] = $geburtsdatum;

        return $this;
    }

    /**
     * Gets geschaeftlich_organisation_id
     *
     * @return string
     */
    public function getGeschaeftlichOrganisationId()
    {
        return $this->container['geschaeftlich_organisation_id'];
    }

    /**
     * Sets geschaeftlich_organisation_id
     *
     * @param string $geschaeftlich_organisation_id geschaeftlich_organisation_id
     *
     * @return $this
     */
    public function setGeschaeftlichOrganisationId($geschaeftlich_organisation_id)
    {
        $this->container['geschaeftlich_organisation_id'] = $geschaeftlich_organisation_id;

        return $this;
    }

    /**
     * Gets geschaeftliche_e_mail_adresse
     *
     * @return string
     */
    public function getGeschaeftlicheEMailAdresse()
    {
        return $this->container['geschaeftliche_e_mail_adresse'];
    }

    /**
     * Sets geschaeftliche_e_mail_adresse
     *
     * @param string $geschaeftliche_e_mail_adresse Die Geschäftliche E-Mail-Adresse des Teilnehmers
     *
     * @return $this
     */
    public function setGeschaeftlicheEMailAdresse($geschaeftliche_e_mail_adresse)
    {
        $this->container['geschaeftliche_e_mail_adresse'] = $geschaeftliche_e_mail_adresse;

        return $this;
    }

    /**
     * Gets geschlecht
     *
     * @return string
     */
    public function getGeschlecht()
    {
        return $this->container['geschlecht'];
    }

    /**
     * Sets geschlecht
     *
     * @param string $geschlecht Das Geschlecht des Teilnehmers
     *
     * @return $this
     */
    public function setGeschlecht($geschlecht)
    {
        $allowedValues = $this->getGeschlechtAllowableValues();
        if (!is_null($geschlecht) && !in_array($geschlecht, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'geschlecht', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['geschlecht'] = $geschlecht;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets nachname
     *
     * @return string
     */
    public function getNachname()
    {
        return $this->container['nachname'];
    }

    /**
     * Sets nachname
     *
     * @param string $nachname Der Nachname des Teilnehmers
     *
     * @return $this
     */
    public function setNachname($nachname)
    {
        $this->container['nachname'] = $nachname;

        return $this;
    }

    /**
     * Gets personen_nr
     *
     * @return string
     */
    public function getPersonenNr()
    {
        return $this->container['personen_nr'];
    }

    /**
     * Sets personen_nr
     *
     * @param string $personen_nr Die Personen-Nummer des Teilnehmers.
     *
     * @return $this
     */
    public function setPersonenNr($personen_nr)
    {
        $this->container['personen_nr'] = $personen_nr;

        return $this;
    }

    /**
     * Gets vorname
     *
     * @return string
     */
    public function getVorname()
    {
        return $this->container['vorname'];
    }

    /**
     * Sets vorname
     *
     * @param string $vorname Der Vorname des Teilnehmers
     *
     * @return $this
     */
    public function setVorname($vorname)
    {
        $this->container['vorname'] = $vorname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


