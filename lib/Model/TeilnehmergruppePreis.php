<?php
/**
 * TeilnehmergruppePreis
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VEDA Bildungsmanager API
 *
 * Dokumentation der REST-Schnittstellen des VEDA Bildungsmanagers für die Version 2. Die Dokumentation zu speziellen Versionen kann über die Angabe des zusätzlichen Parameters \"group\" angezeigt werden. Beispiel: .../api/docs?group=v1 für die Dokumentation der Version 1, die aktuelle Version ist unter .../api/docs erreichbar.
 *
 * OpenAPI spec version: 2
 * Contact: info@veda.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TeilnehmergruppePreis Class Doc Comment
 *
 * @category Class
 * @description Die Preisangabe eines Veranstaltungstermins/Terminreihe für eine Teilnehmergruppe.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TeilnehmergruppePreis implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TeilnehmergruppePreis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'anzahl_raten' => 'int',
        'preis' => 'float',
        'teilnehmergruppe_id' => 'string',
        'zahlungsweise' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'anzahl_raten' => null,
        'preis' => null,
        'teilnehmergruppe_id' => null,
        'zahlungsweise' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anzahl_raten' => 'anzahlRaten',
        'preis' => 'preis',
        'teilnehmergruppe_id' => 'teilnehmergruppeID',
        'zahlungsweise' => 'zahlungsweise'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anzahl_raten' => 'setAnzahlRaten',
        'preis' => 'setPreis',
        'teilnehmergruppe_id' => 'setTeilnehmergruppeId',
        'zahlungsweise' => 'setZahlungsweise'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anzahl_raten' => 'getAnzahlRaten',
        'preis' => 'getPreis',
        'teilnehmergruppe_id' => 'getTeilnehmergruppeId',
        'zahlungsweise' => 'getZahlungsweise'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ZAHLUNGSWEISE_EINMALZAHLUNG = 'Einmalzahlung';
    const ZAHLUNGSWEISE_RATENZAHLUNG = 'Ratenzahlung';
    const ZAHLUNGSWEISE_TEILZAHLUNG = 'Teilzahlung';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getZahlungsweiseAllowableValues()
    {
        return [
            self::ZAHLUNGSWEISE_EINMALZAHLUNG,
            self::ZAHLUNGSWEISE_RATENZAHLUNG,
            self::ZAHLUNGSWEISE_TEILZAHLUNG,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['anzahl_raten'] = isset($data['anzahl_raten']) ? $data['anzahl_raten'] : null;
        $this->container['preis'] = isset($data['preis']) ? $data['preis'] : null;
        $this->container['teilnehmergruppe_id'] = isset($data['teilnehmergruppe_id']) ? $data['teilnehmergruppe_id'] : null;
        $this->container['zahlungsweise'] = isset($data['zahlungsweise']) ? $data['zahlungsweise'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getZahlungsweiseAllowableValues();
        if (!is_null($this->container['zahlungsweise']) && !in_array($this->container['zahlungsweise'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'zahlungsweise', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anzahl_raten
     *
     * @return int
     */
    public function getAnzahlRaten()
    {
        return $this->container['anzahl_raten'];
    }

    /**
     * Sets anzahl_raten
     *
     * @param int $anzahl_raten Ausser bei Zahlungsweise 'Einmalzahlung': die Anzahl der Raten.
     *
     * @return $this
     */
    public function setAnzahlRaten($anzahl_raten)
    {
        $this->container['anzahl_raten'] = $anzahl_raten;

        return $this;
    }

    /**
     * Gets preis
     *
     * @return float
     */
    public function getPreis()
    {
        return $this->container['preis'];
    }

    /**
     * Sets preis
     *
     * @param float $preis Der Preis für den Veranstaltungstermin/Terminreihe.
     *
     * @return $this
     */
    public function setPreis($preis)
    {
        $this->container['preis'] = $preis;

        return $this;
    }

    /**
     * Gets teilnehmergruppe_id
     *
     * @return string
     */
    public function getTeilnehmergruppeId()
    {
        return $this->container['teilnehmergruppe_id'];
    }

    /**
     * Sets teilnehmergruppe_id
     *
     * @param string $teilnehmergruppe_id Die ID der Teilnehmergruppe, für die der Preis angegeben ist.
     *
     * @return $this
     */
    public function setTeilnehmergruppeId($teilnehmergruppe_id)
    {
        $this->container['teilnehmergruppe_id'] = $teilnehmergruppe_id;

        return $this;
    }

    /**
     * Gets zahlungsweise
     *
     * @return string
     */
    public function getZahlungsweise()
    {
        return $this->container['zahlungsweise'];
    }

    /**
     * Sets zahlungsweise
     *
     * @param string $zahlungsweise Die Zahlungsweise, für die der Preis angegeben ist.
     *
     * @return $this
     */
    public function setZahlungsweise($zahlungsweise)
    {
        $allowedValues = $this->getZahlungsweiseAllowableValues();
        if (!is_null($zahlungsweise) && !in_array($zahlungsweise, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'zahlungsweise', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['zahlungsweise'] = $zahlungsweise;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


